pivot_wider(names_from=term,
values_from=estimate,p.value,std.error,statistic)
shard$statistic
wide <- shard %>%
pivot_wider(names_from=term,
values_from=estimate,p.value,std.error,statistic)
wide <- shard %>%
pivot_wider(names_from=term,
values_from=estimate,p.value,std.error)
wide <- shard %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
View(wide)
for (index in c(1:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
if (index==1){
binding <- shard
}else{
binding <- rbind(binding,shard)
}
binding <- pivot_wider(binding,
names_from=term,
values_from=c(estimate))
}
for (index in c(1:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
if (index==1){
binding <- shard
}else{
binding <- rbind(binding,shard)
}
}
View(binding)
binding <- mutate(binding,Source=group_keys(long_data))
binding
binding$Source
View(point_summary)
binding$Source
point_summary$Emission_source
amalgm <- inner_join(point_summary,binding,by=Emission_source)
amalgm <- inner_join(point_summary,binding,by="Emission_source")
binding <- mutate(binding,Emission_source=group_keys(long_data))
for (index in c(1:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
if (index==1){
binding <- shard
}else{
binding <- rbind(binding,shard)
}
binding <- mutate(binding,Emission_source=group_keys(long_data))
}
for (index in c(1:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
if (index==1){
binding <- shard
}else{
binding <- rbind(binding,shard)
}
binding <- mutate(binding,Emission_source=group_keys(long_data))
}
for (index in c(1:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
if (index==1){
binding <- shard
}else{
binding <- rbind(binding,shard)
}
binding <- mutate(binding,Emission_source=group_keys(long_data))
}
binding <- rbind(binding,shard)
if (index==1){
binding <- shard
}else{
binding <- rbind(binding,shard)
}
for (index in c(1:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
if (index==1){
binding <- shard
}else{
binding <- rbind(binding,shard)
}
binding <- mutate(binding,Emission_source=group_keys(long_data))
}
inex <- 2
index <- 2
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
View(shard)
for (index in c(1:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
if (index==1){
binding <- shard
}else{
binding <- bind_rows(binding,shard)
}
binding <- mutate(binding,Emission_source=group_keys(long_data))
}
binding <- bind_rows(binding,shard)
index_2
index <- 2
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- bind_rows(binding,shard)
for (index in c(2:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- bind_rows(binding,shard)
}
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
for (index in c(2:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- bind_rows(binding,shard)
}
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[1]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- shard
for (index in c(2:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- bind_rows(binding,shard)
}
binding <- mutate(binding,Emission_source=group_keys(long_data))
amalgm <- inner_join(point_summary,binding,by="Emission_source")
binding <- mutate(binding,Emission_source=group_keys(long_data) %>% tibble())
amalgm <- inner_join(point_summary,binding,by="Emission_source")
class(binding$Emission_source)
class(point_summary$Emission_source)
binding <- mutate(binding,Emission_source=as.character(group_keys(long_data)))
amalgm <- inner_join(point_summary,binding,by="Emission_source")
as.character(group_keys(long_data)
as.character(group_keys(long_data))
as_character(group_keys(long_data))
group_keys(long_data)
group_keys(long_data)[1]
class(group_keys(long_data)[1])
class(pull(group_keys(long_data)[1]))
binding <- mutate(binding,Emission_source=pull(group_keys(long_data)))
amalgm <- inner_join(point_summary,binding,by="Emission_source")
View(amalgm)
View(amalgm)
View(point_summary)
#make the data long so the sources can be processed separately
long_data <- data %>% pivot_longer(
cols=c("Agricultural","Domestic combustion","Energy production",
"Industrial combustion","Industrial production","Natural",
"Offshore","Other transport and mobile machinery","Road transport","Solvents","Total"
,"Waste treatment and disposal","Point sources"),
names_to = "Emission_source",
values_to = "emissions") %>%
group_by(Emission_source) %>%
mutate(emissions=replace_na(emissions,0))
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions))
View(point_summary)
#make the data long so the sources can be processed separately
long_data <- data %>% pivot_longer(
cols=c("Agricultural","Domestic combustion","Energy production",
"Industrial combustion","Industrial production","Natural",
"Offshore","Other transport and mobile machinery","Road transport","Solvents","Total"
,"Waste treatment and disposal","Point sources"),
names_to = "Emission_source",
values_to = "emissions") %>%
group_by(Emission_source) %>%
mutate(emissions=replace_na(emissions,0))
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions))
group_by(long_data,IMD)
deciles
View(point_summary)
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions))
View(point_summary)
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions)) %>%
pivot_wider(names_from=Emission_source,values_from=c(mean,median))
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions)) %>%
pivot_wider(names_from=IMD,values_from=c(mean,median,Emission_source))
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions))# %>%
View(point_summary)
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions))# %>%
hmm <- point_summary %>% pivot_wider(names_from=IMD,values_from=c(mean,median,Emission_source))
View(hmm)
View(point_summary)
hmm <- point_summary %>% pivot_wider(names_from=IMD,values_from=c(mean,median))
View(hmm)
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions)) %>%
#Make the data wide so the summary columns can be calculated
pivot_wider(names_from=IMD,values_from=c(mean,median))# %>%
View(point_summary)
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions)) %>%
#Make the data wide so the summary columns can be calculated
pivot_wider(names_from=IMD,values_from=c(mean,median)) %>%
#calculate the flat and % differences between the deciles
mutate(mean_flat_difference=mean_10-mean_1,
mean_percentage_differnce=mean_flat_difference/mean_1,
median_flat_difference=median_10-median_1,
median_percentage_differnce=median_flat_difference/median_1,)
View(point_summary)
View(amalgm)
for (index in c(2:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- bind_rows(binding,shard)
}
binding <- mutate(binding,Emission_source=pull(group_keys(long_data))) #%>%
View(binding)
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[1]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- shard
for (index in c(2:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- bind_rows(binding,shard)
}
binding <- mutate(binding,Emission_source=pull(group_keys(long_data))) #%>%
binding
library(PRAWNS)
Startup()
setwd("~/GitHub/Data-analysis-with-PRAWNS-demo")
prawn_path <- "PM2.5_emissions_in_2019_v0.3.0/PRAWN.csv"
data <- read.csv(prawn_path,
row.names=1,
check.names=FALSE)
#make the data long so the sources can be processed separately
long_data <- data %>% pivot_longer(
cols=c("Agricultural","Domestic combustion","Energy production",
"Industrial combustion","Industrial production","Natural",
"Offshore","Other transport and mobile machinery","Road transport","Solvents","Total"
,"Waste treatment and disposal","Point sources"),
names_to = "Emission_source",
values_to = "emissions") %>%
group_by(Emission_source) %>%
mutate(emissions=replace_na(emissions,0))
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions)) %>%
#Make the data wide so the summary columns can be calculated
pivot_wider(names_from=IMD,values_from=c(mean,median)) %>%
#calculate the flat and % differences between the deciles
mutate(mean_flat_difference=mean_10-mean_1,
mean_percentage_differnce=mean_flat_difference/mean_1,
median_flat_difference=median_10-median_1,
median_percentage_differnce=median_flat_difference/median_1,)
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% deciles) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions)) %>%
#Make the data wide so the summary columns can be calculated
pivot_wider(names_from=IMD,values_from=c(mean,median)) %>%
#calculate the flat and % differences between the deciles
mutate(mean_flat_difference=mean_10-mean_1,
mean_percentage_differnce=mean_flat_difference/mean_1,
median_flat_difference=median_10-median_1,
median_percentage_differnce=median_flat_difference/median_1,)
#get the summary stats for deciles 1 and 10
point_summary <- filter(group_by(long_data,IMD,Emission_source), IMD %in% c(1,10)) %>%
#add grouping for summarise
#group_by(IMD) %>%
#calculate the mean and median for each decile
summarise(mean=mean(emissions),median=median(emissions)) %>%
#Make the data wide so the summary columns can be calculated
pivot_wider(names_from=IMD,values_from=c(mean,median)) %>%
#calculate the flat and % differences between the deciles
mutate(mean_flat_difference=mean_10-mean_1,
mean_percentage_differnce=mean_flat_difference/mean_1,
median_flat_difference=median_10-median_1,
median_percentage_differnce=median_flat_difference/median_1,)
View(point_summary)
#jerry rig a fix to do(lm()) not wnting to work
fragments <- long_data %>%
group_split()
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[1]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- shard
for (index in c(2:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- bind_rows(binding,shard)
}
binding <- mutate(binding,Emission_source=pull(group_keys(long_data))) #%>%
hmm <- binding %>% rename(intercept=estimate(intercept), gradient=estimateIMD)
hmm <- binding %>% rename(intercept="estimate(intercept)", gradient=estimateIMD)
hmm <- binding %>% rename(intercept="estimate_(intercept)", gradient=estimate_IMD)
binding$`estimate_(Intercept)`
hmm <- binding %>% rename(intercept="estimate_(Intercept)", gradient=estimate_IMD)
hmm
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[1]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- shard
for (index in c(2:length(fragments))){
shard <- tidy(lm(formula=emissions~IMD,data=fragments[[index]])) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
binding <- bind_rows(binding,shard)
}
line_calculations <- mutate(binding,Emission_source=pull(group_keys(long_data))) %>%
#rename the columns to avoid confusion
rename(intercept="estimate_(Intercept)", gradient=estimate_IMD) %>%
#calculate the intercepts
mutate(mean_line_1=intercept+gradient,
mean_line_10=intercept+10*gradient,
flat_mean_regression_differnce=mean_line_10-mean_line_1,
percentage_mean_regression=flat_mean_regression_differnce/mean_line_1)
line_calculations
View(line_calculations)
View(point_summary)
#calculate the median for each decile
meds <- long_data  %>%
summarise(median=median(Total))
#calculate the median for each decile
meds <- long_data  %>%
summarise(median=median(Emission_source))
View(meds)
warnings()
#calculate the median for each decile
meds <- long_data  %>%
summarise(median=mean(Emission_source))
View(meds)
long_data
#calculate the median for each decile
meds <- long_data  %>% group_by(IMD,Emission_source) %>%
summarise(median=median(emissions))
meds
#create a linear model for use in the next part
med_fit <- do(model=lm(median~IMD, data=meds))
#create a linear model for use in the next part
med_fit <- meds %>% do(model=lm(median~IMD, data=.))
med_fit
group_keys(meds)
#create a linear model for use in the next part
med_fit <- meds %>% ungroup(IMD) %>% group_by(Emission_source) %>% do(model=lm(median~IMD, data=.))
med_fit
tidy(med_fit)
med_fit$model[2]
tidy(med_fit$model[2])
meds %>% ungroup(IMD) %>% group_by(Emission_source) %>% do(tidy(lm(median~IMD, data=.))
)
#jerry rig a fix to do(lm()) not wnting to work
unbound <- long_data %>% do(tidy(lm(emissions~IMD, data=.)))
unbound
#jerry rig a fix to do(lm()) not wnting to work
unbound <- long_data %>% do(tidy(lm(emissions~IMD, data=.))) %>%
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
unbound
line_calculations <- mutate(unbound,Emission_source=pull(group_keys(long_data))) %>%
#rename the columns to avoid confusion
rename(intercept="estimate_(Intercept)", gradient=estimate_IMD) %>%
#calculate the intercepts
mutate(mean_line_1=intercept+gradient,
mean_line_10=intercept+10*gradient,
flat_mean_regression_differnce=mean_line_10-mean_line_1,
percentage_mean_regression=flat_mean_regression_differnce/mean_line_1)
unbound
#
unbound <- long_data %>% do(tidy(lm(emissions~IMD, data=.))) %>%
#pivot out the stats so each source is on one row
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic))
View(unbound)
#
unbound <- long_data %>% do(tidy(lm(emissions~IMD, data=.))) %>%
#pivot out the stats so each source is on one row
pivot_wider(names_from=term,
values_from=c(estimate,p.value,std.error,statistic)) %>%
#rename the columns to avoid confusion
rename(intercept="estimate_(Intercept)", gradient=estimate_IMD) %>%
#calculate the intercepts
mutate(mean_line_1=intercept+gradient,
mean_line_10=intercept+10*gradient,
flat_mean_regression_differnce=mean_line_10-mean_line_1,
percentage_mean_regression=flat_mean_regression_differnce/mean_line_1)
#calculate the median for each decile
meds <- long_data  %>% group_by(IMD,Emission_source) %>%
summarise(median=median(emissions))
#create a linear model for use in the next part
med_fit <- meds %>% ungroup(IMD) %>% group_by(Emission_source) %>% do(tidy(lm(median~IMD, data=.)))%>%
#calculate the intercepts
mutate(median_line_1=intercept+gradient,
median_line_10=intercept+10*gradient,
flat_mean_regression_differnce=median_line_10-median_line_1,
percentage_median_regression=flat_median_regression_differnce/median_line_1)
#create a linear model for use in the next part
med_fit <- meds %>% ungroup(IMD) %>% group_by(Emission_source) %>%
#get the tabulated stats from regression on the median data
do(tidy(lm(median~IMD, data=.)))%>%
#rename the columns to avoid issues
rename(intercept="estimate_(Intercept)", gradient=estimate_IMD) %>%
#calculate the intercepts
mutate(median_line_1=intercept+gradient,
median_line_10=intercept+10*gradient,
flat_mean_regression_differnce=median_line_10-median_line_1,
percentage_median_regression=flat_median_regression_differnce/median_line_1)
#calculate the median for each decile
meds <- long_data  %>% group_by(IMD,Emission_source) %>%
summarise(median=median(emissions))
meds$median
#create a linear model for use in the next part
med_fit <- meds %>% ungroup(IMD) %>% group_by(Emission_source) %>%
#get the tabulated stats from regression on the median data
do(tidy(lm(median~IMD, data=.)))#%>%
med_fit
#create a linear model for use in the next part
med_fit <- meds %>% ungroup(IMD) %>% group_by(Emission_source) %>%
#get the tabulated stats from regression on the median data
do(tidy(lm(median~IMD, data=.)))%>%
#pivot out the data so each source is on one line
pivot_wider(names_from=term,
values_from=c(estimate,
p.value,
std.error,statistic)) %>%
#rename the columns to avoid issues
rename(intercept="estimate_(Intercept)", gradient=estimate_IMD) %>%
#calculate the intercepts
mutate(median_line_1=intercept+gradient,
median_line_10=intercept+10*gradient,
flat_mean_regression_differnce=median_line_10-median_line_1,
percentage_median_regression=flat_median_regression_differnce/median_line_1)
#create a linear model for use in the next part
med_fit <- meds %>% ungroup(IMD) %>% group_by(Emission_source) %>%
#get the tabulated stats from regression on the median data
do(tidy(lm(median~IMD, data=.)))%>%
#pivot out the data so each source is on one line
pivot_wider(names_from=term,
values_from=c(estimate,
p.value,
std.error,statistic)) %>%
#rename the columns to avoid issues
rename(intercept="estimate_(Intercept)", gradient=estimate_IMD) %>%
#calculate the intercepts
mutate(median_line_1=intercept+gradient,
median_line_10=intercept+10*gradient,
flat_median_regression_differnce=median_line_10-median_line_1,
percentage_median_regression=flat_median_regression_differnce/median_line_1)
med_fit
med_fit$percentage_median_regression
