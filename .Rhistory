rename(LSOA11CD=LSOA.code..2011.) %>%
inner_join(city_data,by="LSOA11CD")
bleh <- LSOA_demographics%>%
inner_join(rural_urban,by=c("LSOA11NM"="LSOA11NM"))
source("~/GitHub/PRAWNS/R/create_prawns.R")
create_prawns(raster_path= "Data/pm2.5_rasters_2019",
shapefile_path = "Data/2011_LSOA_shapefile_20m_generalised",
data_path= list.files("Data/LSOA_statistics"),
key_variable = "LSOA19CD",
key_variable_aliases =c("LSOA.code..2011.","?..LSOA11CD"),
output_path="Outputs/create_prawns_2_0_0pm2.5_test.csv",
pollutant_data_name = "pm2_5",
year=2019,
pollutant="PM2.5")
#Read in the data with NA valuse changed to unclassified, raising red flags if necessary
active_stack <-read.csv(prawn_path) %>%
replace_na(list(RUC11="Unclassified"))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
group_by(Classification)
RUC_summary <- ggplot(temp)+
aes(x=decile,
y=Emissions,
colour=Classification)+
geom_line(stat="summary",aes(linetype="Mean")
)+
geom_smooth(method="lm",formula=y~x,se=FALSE,show.legend=FALSE,aes(linetype="Mean"))+
#Plot the line of best fit for the median
geom_quantile(quantiles=0.5,
aes(linetype="Median"),
size =1)+
#Plot a line through the medians for each decile
geom_line(stat="summary",fun=median,aes(linetype="Median"))
RUC_summary
prawn_path
create_prawns(raster_path= "Data/NOx_rasters_2019",
shapefile_path = "Data/2011_LSOA_shapefile_20m_generalised",
data_path= list.files("Data/LSOA_statistics"),
key_variable = "LSOA19CD",
key_variable_aliases =c("LSOA.code..2011.","?..LSOA11CD"),
output_path="Outputs/create_prawns_2_0_0_test.csv",
pollutant_data_name = "nox",
year=2019,
pollutant="NOx")
prawn_path <-  "Outputs/create_prawns_2_0_0_test.csv"
#Read in the data with NA valuse changed to unclassified, raising red flags if necessary
active_stack <-read.csv(prawn_path) %>%
replace_na(list(RUC11="Unclassified"))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
group_by(Classification)
RUC_summary <- ggplot(temp)+
aes(x=decile,
y=Emissions,
colour=Classification)+
geom_line(stat="summary",aes(linetype="Mean")
)+
geom_smooth(method="lm",formula=y~x,se=FALSE,show.legend=FALSE,aes(linetype="Mean"))+
#Plot the line of best fit for the median
geom_quantile(quantiles=0.5,
aes(linetype="Median"),
size =1)+
#Plot a line through the medians for each decile
geom_line(stat="summary",fun=median,aes(linetype="Median"))
RUC_summary
Area_population <- ggplot(data=active_stack)+
aes(x=RUC11,fill=RUC11 )+
geom_bar()+
labs(
title="population distribution")+
theme(
axis.text.x = element_blank(),
axis.ticks = element_blank())
Area_population
source("~/GitHub/PRAWNS/R/Startup.R", encoding = 'UTF-8')
startup()
Startup()
prawn_path <-  "Outputs/create_prawns_2_0_0_test.csv"
#Read in the data with NA valuse changed to unclassified, raising red flags if necessary
active_stack <-read.csv(prawn_path) %>%
replace_na(list(RUC11="Unclassified"))
setwd("~/GitHub/Data-analysis-with-PRAWNS-demo")
#Read in the data with NA valuse changed to unclassified, raising red flags if necessary
active_stack <-read.csv(prawn_path) %>%
replace_na(list(RUC11="Unclassified"))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==1) %>% summarise(mean=mean(total))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==1) %>% summarise(mean=mean(Total))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification)) %>% fct_reorder(first_decile)
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) #%>%
class(temp$Classification)
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification)) #%>% fct_reorder(first_decile)
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification)) %>% fct_reorder(first_decile)
first_decile
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==1) %>%
group_by(Classification) %>%
summarise(mean=mean(Total))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==1) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification)) %>% fct_reorder(first_decile)
first_decile
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==1) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total))
first_decile
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification)) %>% fct_reorder(first_decile$mean)
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification)) #%>% fct_reorder(first_decile$mean)
class(temp$Classification)
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification %>% fct_reorder(first_decile$mean)))
length(temp$Classification)
length(groups(temp$Classification))
length(unique(temp$Classification))
length(first_decile)
length(first_decile$mean)
unique(temp$Classification)
length(unique(active_stack$RUC11))
unique(active_stack$RUC11)!%in%unique(first_decile$RUC11)
unique(active_stack$RUC11)%in%unique(first_decile$RUC11)
unique(active_stack$RUC11)[6]
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==1)# %>%
length(unique(first_decile$RUC11))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==2) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification %>% fct_reorder(first_decile$mean)))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==3) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification %>% fct_reorder(first_decile$mean)))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==4) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification %>% fct_reorder(first_decile$mean)))
filter(active_stack,IMD==3)
filter(active_stack,IMD==3) %>% tibble()
filter(active_stack,IMD==3 & RUC11=Rural village and dispersed in a sparse setting) %>% tibble()
filter(active_stack,IMD==3 & RUC11==Rural village and dispersed in a sparse setting) %>% tibble()
filter(active_stack,IMD==3 & RUC11=="Rural village and dispersed in a sparse setting") %>% tibble()
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==4)# %>%
test <- filter(active_stack,IMD==4) %>% unique(RUC11)
test <- filter(active_stack,IMD==4)# %>% unique(RUC11)
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==4) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification %>% fct_reorder(first_decile$mean)))
test <- filter(active_stack,IMD==4)
unique(test$RUC11)
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==4) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total))
unique(first_decile$RUC11)
#Read in the data with NA valuse changed to unclassified, raising red flags if necessary
active_stack <-read.csv(prawn_path) %>%
replace_na(list(RUC11="Unclassified"))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==4) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification %>% fct_reorder(first_decile$mean)))
length(temp$Classification)
length(unique(temp$Classification))
length(unique(first_decile$RUC11))
length(unique(first_decile$mean))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==4) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total)) %>%
mutate(mean=as.factor(mean))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=as_factor(Classification %>% fct_reorder(first_decile$mean)))
#Reorder the legend so it lines up better for readability
fct_reorder(temp$Classification,temp$Emissions,mean)))
#Reorder the legend so it lines up better for readability
fct_reorder(temp$Classification,temp$Emissions,mean)
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=fct_reorder(temp$Classification,temp$Emissions,mean))
#Read in the data with NA valuse changed to unclassified, raising red flags if necessary
active_stack <-read.csv(prawn_path) %>%
replace_na(list(RUC11="Unclassified"))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==4) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total)) %>%
mutate(mean=as.factor(mean))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification) %>%
#Reorder the legend so it lines up better for readability
mutate(Classification=fct_reorder(temp$Classification,temp$Emissions,mean))
last_error()
fct_reorder(temp$Classification,temp$Emissions,mean)
#Read in the data with NA valuse changed to unclassified, raising red flags if necessary
active_stack <-read.csv(prawn_path) %>%
replace_na(list(RUC11="Unclassified"))
#create a summary of the data at the first decile to sort the legend using
first_decile <- filter(active_stack,IMD==4) %>%
group_by(RUC11) %>%
summarise(mean=mean(Total)) %>%
mutate(mean=as.factor(mean))
#Make the data long to enable grouping by source
temp <- active_stack %>%
tibble() %>%
select(decile = IMD,
Emissions=Total,
Classification=RUC11) %>%
#group by the classification for graphing
group_by(Classification)# %>%
RUC_summary <- ggplot(temp)+
aes(x=decile,
y=Emissions,
colour=fct_reorder(Classification,Emissions))+
geom_line(stat="summary",aes(linetype="Mean")
)+
geom_smooth(method="lm",formula=y~x,se=FALSE,show.legend=FALSE,aes(linetype="Mean"))+
#Plot the line of best fit for the median
geom_quantile(quantiles=0.5,
aes(linetype="Median"),
size =1)+
#Plot a line through the medians for each decile
geom_line(stat="summary",fun=median,aes(linetype="Median"))+
labs(x="IMD decile where 10 is least deprived",
y=paste0("Average ",pollutant," emissions/tonnes km^2"),
title="NOx emissions by RUC classification 2019")+
scale_x_continuous(
breaks=c(1:10),
expand = expansion(mult=0,add=0),
minor_breaks = FALSE)
pollutant <- "bleh"
RUC_summary <- ggplot(temp)+
aes(x=decile,
y=Emissions,
colour=fct_reorder(Classification,Emissions))+
geom_line(stat="summary",aes(linetype="Mean")
)+
geom_smooth(method="lm",formula=y~x,se=FALSE,show.legend=FALSE,aes(linetype="Mean"))+
#Plot the line of best fit for the median
geom_quantile(quantiles=0.5,
aes(linetype="Median"),
size =1)+
#Plot a line through the medians for each decile
geom_line(stat="summary",fun=median,aes(linetype="Median"))+
labs(x="IMD decile where 10 is least deprived",
y=paste0("Average ",pollutant," emissions/tonnes km^2"),
title="NOx emissions by RUC classification 2019")+
scale_x_continuous(
breaks=c(1:10),
expand = expansion(mult=0,add=0),
minor_breaks = FALSE)
RUC_summary
RUC_summary <- ggplot(temp)+
aes(x=decile,
y=Emissions,
colour=fct_reorder(Classification,Emissions,desc=TRUE))+
geom_line(stat="summary",aes(linetype="Mean")
)+
geom_smooth(method="lm",formula=y~x,se=FALSE,show.legend=FALSE,aes(linetype="Mean"))+
#Plot the line of best fit for the median
geom_quantile(quantiles=0.5,
aes(linetype="Median"),
size =1)+
#Plot a line through the medians for each decile
geom_line(stat="summary",fun=median,aes(linetype="Median"))+
labs(x="IMD decile where 10 is least deprived",
y=paste0("Average ",pollutant," emissions/tonnes km^2"),
title="NOx emissions by RUC classification 2019")+
scale_x_continuous(
breaks=c(1:10),
expand = expansion(mult=0,add=0),
minor_breaks = FALSE)
RUC_summary#
RUC_summary <- ggplot(temp)+
aes(x=decile,
y=Emissions,
colour=fct_reorder(Classification,Emissions,.desc=TRUE))+
geom_line(stat="summary",aes(linetype="Mean")
)+
geom_smooth(method="lm",formula=y~x,se=FALSE,show.legend=FALSE,aes(linetype="Mean"))+
#Plot the line of best fit for the median
geom_quantile(quantiles=0.5,
aes(linetype="Median"),
size =1)+
#Plot a line through the medians for each decile
geom_line(stat="summary",fun=median,aes(linetype="Median"))+
labs(x="IMD decile where 10 is least deprived",
y=paste0("Average ",pollutant," emissions/tonnes km^2"),
title="NOx emissions by RUC classification 2019")+
scale_x_continuous(
breaks=c(1:10),
expand = expansion(mult=0,add=0),
minor_breaks = FALSE)
RUC_summary
Area_population <- ggplot(data=active_stack)+
aes(x=RUC11,fill=RUC11 )+
geom_bar()+
labs(
title="population distribution")+
theme(
axis.text.x = element_blank(),
axis.ticks = element_blank())
Area_population
output <- list(RUC_summary,Area_population)
output[1]
output[2]
source("~/GitHub/PRAWNS/R/RUC_IMD.R")
mhh <- RUC_IMD(prawn_path,"NOx")
mhh[1]
source("~/.active-rstudio-document")
faceted_plot(prawn_path,TCITY15NM)
source("~/.active-rstudio-document")
faceted_plot(prawn_path,TCITY15NM)
last_error()
source("~/.active-rstudio-document")
faceted_plot(prawn_path,TCITY15NM)
source("~/.active-rstudio-document")
faceted_plot(prawn_path,TCITY15NM,"NOx")
source("~/.active-rstudio-document")
faceted_plot(prawn_path,TCITY15NM,"NOx")
filtered_data <- read.csv(prawn_path)
faceted_plot(prawn_path,"TCITY15NM","NOx")
source("~/GitHub/PRAWNS/R/faceted_plot.R")
faceted_plot(prawn_path,"TCITY15NM","NOx")
source("~/GitHub/PRAWNS/R/faceted_plot.R")
faceted_plot(prawn_path,"TCITY15NM","NOx")
source("~/GitHub/PRAWNS/R/faceted_plot.R")
faceted_plot(prawn_path,"TCITY15NM","NOx")
source("~/GitHub/PRAWNS/R/faceted_plot.R")
faceted_plot(prawn_path,"TCITY15NM","NOx")
faceted_plot(prawn_path,"The moon","NOx")
source("~/GitHub/PRAWNS/R/faceted_plot.R")
source("~/GitHub/PRAWNS/R/faceted_plot.R")
faceted_plot(prawn_path,"The moon","NOx")
source("~/GitHub/PRAWNS/R/faceted_plot.R")
faceted_plot(prawn_path,"The moon","NOx")
source("~/GitHub/PRAWNS/R/faceted_plot.R")
faceted_plot(prawn_path,"The moon","NOx")
faceted_plot(prawn_path,"TCITY15NM","NOx")
hmm <- City_profile+
facet_wrap(~area,scales="free_y")
City_profile <- faceted_plot(prawn_path,"The moon","NOx")
City_profile
hmm <- City_profile+
facet_wrap(~area,scales="free_y")
hmm
hmm <- City_profile+
facet_wrap(~Area,scales="free_y")
hmm
source("~/GitHub/PRAWNS/R/faceted_plot.R")
faceted_plot(prawn_path,"TCITY15NM","NOx")
faceted_plot(prawn_path,"The moon","NOx")
source("~/GitHub/PRAWNS/R/area_IMD_vs_pol.R")
area_IMD_vs_pol(prawn_path,"NOx","County/UA")
source("~/GitHub/PRAWNS/R/area_IMD_vs_pol.R")
area_IMD_vs_pol(prawn_path,"NOx","County/UA")
source("~/GitHub/PRAWNS/R/area_IMD_vs_pol.R")
area_IMD_vs_pol(prawn_path,"NOx","County/UA")
area_IMD_vs_pol(prawn_path,"NOx","The moon#")
